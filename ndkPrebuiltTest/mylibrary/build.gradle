apply plugin: 'com.android.model.library'

model
{
    repositories {
        prebuilt(PrebuiltLibraries) {
            jsoncpp {
                headers.srcDir new File(projectDir, "../../libs/JsonCpp/include")
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = new File(projectDir, "../../libs/JsonCpp/${targetPlatform.getName()}/libjsoncpp.so")
                }
            }
        }
    }

    android {
        compileSdkVersion = 23
        buildToolsVersion = "23.0.2"

        defaultConfig.with {
            minSdkVersion.apiLevel = 19
            targetSdkVersion.apiLevel = 23
            versionCode 1
            versionName "1.0"
        }

    }

    android.ndk {
        moduleName = "testLib"

        toolchain = "gcc"
        toolchainVersion = "4.9"
        platformVersion = 19

        // CFlags is configured in similar way as cppFlags
        CFlags.add("-Wall")
        cppFlags.addAll(["-Wall", "-std=c++1y", "-fexceptions", "-frtti"])
        cppFlags.add( "-Wno-unknown-pragmas" )

        ldLibs.addAll(["android",
                       "dl",
                       "log"])
        stl = "gnustl_shared"

        abiFilters.addAll( [ 'armeabi-v7a', 'x86' ] )
    }

    android.sources {
        main {
            jni {
                source {
                    srcDirs = ["src/main/jni"]
                }
                dependencies {
                    // theres a bug where prebuilt libs aren't packaged into the apk if they're included in the main gradle file... so I put it in a lib dependency
                    library "jsoncpp"
                }
            }
        }
    }

    android.buildTypes {
        release {
            minifyEnabled = false
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.2.1'
}
